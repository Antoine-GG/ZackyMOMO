
testSPI_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000707  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066b  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13SPI_SlaveInitv>:
#define fenetre2 3
#define porte    6

void SPI_SlaveInit() {
	// Set MISO as output
	DDRB |= (1 << MISO);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 61       	ori	r24, 0x10	; 16
  84:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z16SPI_SlaveReceivev>:
}

// Fonction pour recevoir des données via SPI
uint8_t SPI_SlaveReceive() {
	// Wait for reception to complete
	while (!(SPSR & (1 << SPIF)));
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <_Z16SPI_SlaveReceivev>
	// Return received data
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main() {
	// Initialize SPI as slave
	SPI_SlaveInit();
  98:	0e 94 40 00 	call	0x80	; 0x80 <_Z13SPI_SlaveInitv>
	
	// Variable pour stocker les données reçues
	uint8_t receivedData;
	
	DDRD &= ~(1<<fenetre1); DDRD &= ~(1<<fenetre2); DDRD &= ~(1<<porte);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8b b9       	out	0x0b, r24	; 11
	while (1) {		
		// Attendre la demande du maître
		receivedData = SPI_SlaveReceive();
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <_Z16SPI_SlaveReceivev>
		
		uint8_t datatogo;					//récupère les données des INPUTs PIND
		
		if(receivedData==0xEE){
  b6:	8e 3e       	cpi	r24, 0xEE	; 238
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1a>
			uint8_t datatogo = PIND & 0x49; //ne regarder que les bits 0b0X00X00X
  ba:	89 b1       	in	r24, 0x09	; 9
  bc:	89 74       	andi	r24, 0x49	; 73
			SPDR = datatogo;				//mettre le data dans le registre SPI
  be:	8e bd       	out	0x2e, r24	; 46
  c0:	f8 cf       	rjmp	.-16     	; 0xb2 <main+0x1a>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
