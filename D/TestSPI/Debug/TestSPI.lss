
TestSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000715  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046c  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016f  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
#define LED3	    2
#define LED_ANALOG  5

void SPI_MasterInit() {
	// Set MOSI, SCK, and SS as outputs
	DDRB |= (1 << MOSI) | (1 << SCK) | (1 << SS_F) | (1 << SS_E);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 62       	ori	r24, 0x2E	; 46
  84:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master, clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z19SPI_MasterTransmitEh>:
}

// Fonction pour transférer des données via SPI
uint8_t SPI_MasterTransmitE(uint8_t data) {
	PORTB &= ~(1<<SS_E);
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	9d 7f       	andi	r25, 0xFD	; 253
  92:	95 b9       	out	0x05, r25	; 5
	// Start transmission
	SPDR = data;
  94:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while (!(SPSR & (1 << SPIF)));
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_Z19SPI_MasterTransmitEh+0x8>
	PORTB |= (1<<SS_E);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 b9       	out	0x05, r24	; 5
	// Return received data
	return SPDR;
  a2:	8e b5       	in	r24, 0x2e	; 46
}
  a4:	08 95       	ret

000000a6 <_Z19SPI_MasterTransmitFh>:
uint8_t SPI_MasterTransmitF(uint8_t data) {
	PORTB &= ~(1<<SS_F);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	9b 7f       	andi	r25, 0xFB	; 251
  aa:	95 b9       	out	0x05, r25	; 5
	// Start transmission
	SPDR = data;
  ac:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while (!(SPSR & (1 << SPIF)));
  ae:	0d b4       	in	r0, 0x2d	; 45
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <_Z19SPI_MasterTransmitFh+0x8>
	PORTB |= (1<<SS_F);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	85 b9       	out	0x05, r24	; 5
	// Return received data
	return SPDR;
  ba:	8e b5       	in	r24, 0x2e	; 46
}
  bc:	08 95       	ret

000000be <main>:

int main() {
	// Initialize SPI as master
	SPI_MasterInit();
  be:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>

	// Configuration des broches de contrôle des LED comme sorties
	DDRC |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1<< LED_ANALOG);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	87 62       	ori	r24, 0x27	; 39
  c6:	87 b9       	out	0x07, r24	; 7
	uint8_t receivedData;
	uint8_t receivedData_F;

	while (1) {
		/*Parler au Slave E*/
		receivedData = SPI_MasterTransmitE(0xEE);// Envoyer la commande pour allumer les leds
  c8:	8e ee       	ldi	r24, 0xEE	; 238
  ca:	0e 94 47 00 	call	0x8e	; 0x8e <_Z19SPI_MasterTransmitEh>
  ce:	d8 2f       	mov	r29, r24
		
		uint8_t porte    = 0b00000001 & receivedData_F;
		uint8_t fenetre1 = 0b00001000 & receivedData_F;
  d0:	2c 2f       	mov	r18, r28
  d2:	28 70       	andi	r18, 0x08	; 8
		uint8_t fenetre2 = 0b01000000 & receivedData_F;
  d4:	9c 2f       	mov	r25, r28
  d6:	90 74       	andi	r25, 0x40	; 64
		
		//LED1
		if(porte == 0b00000001){
  d8:	c0 ff       	sbrs	r28, 0
  da:	04 c0       	rjmp	.+8      	; 0xe4 <main+0x26>
			PORTC |= (1 << LED1);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x2c>
		}
		else{PORTC &= ~(1 << LED1);}
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	88 b9       	out	0x08, r24	; 8
		//LED2
		if(fenetre1 == 0b00001000){
  ea:	28 30       	cpi	r18, 0x08	; 8
  ec:	21 f4       	brne	.+8      	; 0xf6 <main+0x38>
			PORTC |= (1 << LED2);
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	88 b9       	out	0x08, r24	; 8
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x3e>
		}
		else{PORTC &= ~(1 << LED2);}
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	88 b9       	out	0x08, r24	; 8
		//LED3
		if(fenetre2 == 0b01000000){
  fc:	90 34       	cpi	r25, 0x40	; 64
  fe:	21 f4       	brne	.+8      	; 0x108 <main+0x4a>
			PORTC |= (1 << LED3);
 100:	88 b1       	in	r24, 0x08	; 8
 102:	84 60       	ori	r24, 0x04	; 4
 104:	88 b9       	out	0x08, r24	; 8
 106:	03 c0       	rjmp	.+6      	; 0x10e <main+0x50>
		}
		else{PORTC &= ~(1 << LED3);}
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	83 ed       	ldi	r24, 0xD3	; 211
 110:	90 e3       	ldi	r25, 0x30	; 48
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x54>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x5a>
 118:	00 00       	nop

		_delay_ms(50);
		
//////////////////////////////// Vérifier que le slave envoi bien la valeur demandé
		/*Parler au Slave F*/
		receivedData_F = SPI_MasterTransmitF(0xFF);// Envoyer la commande pour allumer les leds
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z19SPI_MasterTransmitFh>
 120:	c8 2f       	mov	r28, r24
		if(receivedData == 0x00){
 122:	d1 11       	cpse	r29, r1
 124:	04 c0       	rjmp	.+8      	; 0x12e <main+0x70>
			PORTC |= (1<<LED_ANALOG);
 126:	88 b1       	in	r24, 0x08	; 8
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	03 c0       	rjmp	.+6      	; 0x134 <main+0x76>
		}
		else{PORTC &= ~(1<<LED_ANALOG);}
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	88 b9       	out	0x08, r24	; 8
 134:	83 ed       	ldi	r24, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x7a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x80>
 13e:	00 00       	nop
 140:	c3 cf       	rjmp	.-122    	; 0xc8 <main+0xa>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
