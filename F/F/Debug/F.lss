
F.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076e  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8ADC_Initv>:

#define ANALOG_PIN 0 //ADC0 

void ADC_Init() {
	// Configuration de la référence de tension (AVCC comme référence)
	ADMUX = (1 << REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	// Activation du convertisseur analogique-numérique (CAN)
	ADCSRA |= (1 << ADEN);
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	80 83       	st	Z, r24

	// Configuration de la fréquence d'horloge de l'ADC (division par 128)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  90:	80 81       	ld	r24, Z
  92:	87 60       	ori	r24, 0x07	; 7
  94:	80 83       	st	Z, r24
  96:	08 95       	ret

00000098 <_Z8ADC_Readh>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Sélection de la broche analogique à lire
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	90 7f       	andi	r25, 0xF0	; 240
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	89 2b       	or	r24, r25
  a4:	80 83       	st	Z, r24

	// Démarrage de la conversion
	ADCSRA |= (1 << ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24

	// Attendre la fin de la conversion
	while (ADCSRA & (1 << ADSC))
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <_Z8ADC_Readh+0x18>
	;

	// Lecture des données de conversion (16 bits)
	uint16_t adcValue = ADC;
  b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	return adcValue;
}
  c0:	08 95       	ret

000000c2 <_Z13SPI_SlaveInitv>:

void SPI_SlaveInit() {
	// Set MISO as output
	DDRB |= (1 << MISO);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <_Z16SPI_SlaveReceivev>:
}

// Fonction pour recevoir des données via SPI
uint8_t SPI_SlaveReceive() {
	// Wait for reception to complete
	while (!(SPSR & (1 << SPIF)));
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <_Z16SPI_SlaveReceivev>
	// Return received data
	return SPDR;
  d6:	8e b5       	in	r24, 0x2e	; 46
}
  d8:	08 95       	ret

000000da <main>:

int main() {
	// Initialisation de l'ADC
	ADC_Init();
  da:	0e 94 40 00 	call	0x80	; 0x80 <_Z8ADC_Initv>
	// Configuration de la broche de lecture comme entrée
	DDRC &= ~(1 << ANALOG_PIN);
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	87 b9       	out	0x07, r24	; 7
	// Variable pour stocker la valeur lue du capteur
	uint16_t sensorValue;
	uint8_t sensorValue8Bit;
	// Initialize SPI as slave
	SPI_SlaveInit();
  e4:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z13SPI_SlaveInitv>
	// Variable pour stocker les données reçues
	uint8_t receivedData;
	
	while (1) {
		// Attendre la demande du maître
		receivedData = SPI_SlaveReceive();
  e8:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z16SPI_SlaveReceivev>
		
		if(receivedData==0xFF){
  ec:	8f 3f       	cpi	r24, 0xFF	; 255
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0xe>
			sensorValue = ADC_Read(ANALOG_PIN);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8ADC_Readh>
			sensorValue8Bit = (uint8_t)(sensorValue >> 2);
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	87 95       	ror	r24
			SPDR = sensorValue8Bit;				//mettre le data dans le registre SPI
  fe:	8e bd       	out	0x2e, r24	; 46
 100:	f3 cf       	rjmp	.-26     	; 0xe8 <main+0xe>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
