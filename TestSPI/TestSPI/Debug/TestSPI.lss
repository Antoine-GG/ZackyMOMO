
TestSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ec  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000225  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8SPI_initv>:
#define SS2		PINB7 //

void SPI_init()
{
	// set CS, MOSI and SCK to output
	SPI_DDR |= (1 << CS) | (1 << MOSI) | (1 << SCK);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4

	// enable SPI, set as master, and clock to fosc/128
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  86:	83 e5       	ldi	r24, 0x53	; 83
  88:	8c bd       	out	0x2c, r24	; 44
  8a:	08 95       	ret

0000008c <_Z22SPI_masterTransmitBytehh>:
}

void SPI_masterTransmitByte(uint8_t data,uint8_t SelectionSlave)
{
    // drive slave select low
    SPI_DDR &= ~(1 << SelectionSlave);
  8c:	94 b1       	in	r25, 0x04	; 4
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <_Z22SPI_masterTransmitBytehh+0xc>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <_Z22SPI_masterTransmitBytehh+0x8>
  9c:	42 2f       	mov	r20, r18
  9e:	40 95       	com	r20
  a0:	94 23       	and	r25, r20
  a2:	94 b9       	out	0x04, r25	; 4
		
	// load data into register
	SPDR = data;
  a4:	8e bd       	out	0x2e, r24	; 46

	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)));
  a6:	0d b4       	in	r0, 0x2d	; 45
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <_Z22SPI_masterTransmitBytehh+0x1a>
	
    // return slave select to high
    SPI_DDR |= (1 << SelectionSlave);
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	28 2b       	or	r18, r24
  b0:	24 b9       	out	0x04, r18	; 4
  b2:	08 95       	ret

000000b4 <main>:
}

int main(void)
{SPI_init();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <_Z8SPI_initv>
    while (1) 
    {
		SPI_masterTransmitByte(1, SS1);
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 46 00 	call	0x8c	; 0x8c <_Z22SPI_masterTransmitBytehh>
  c0:	fb cf       	rjmp	.-10     	; 0xb8 <main+0x4>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
