
TestSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000725  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000011e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
	return SPDR;
}

void LED_SetState(uint8_t state) {
	// Éteindre toutes les LED
	PORTC &= ~((1 << LED1) | (1 << LED2) | (1 << LED3));
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z18SPI_MasterTransmith>:
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	9b 7f       	andi	r25, 0xFB	; 251
  92:	95 b9       	out	0x05, r25	; 5
  94:	8e bd       	out	0x2e, r24	; 46
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_Z18SPI_MasterTransmith+0x8>
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	08 95       	ret

000000a6 <main>:
	
}

int main() {
	// Initialize SPI as master
	SPI_MasterInit();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>

	// Configuration des broches de contrôle des LED comme sorties
	DDRC |= (1 << LED1) | (1 << LED2) | (1 << LED3);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7

	uint8_t receivedData;

	while (1) {
		// Envoyer la commande pour allumer la LED 1
		SPI_MasterTransmit('A');
  b0:	81 e4       	ldi	r24, 0x41	; 65
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmith>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1a>
  c0:	00 00       	nop
		_delay_ms(10);
		receivedData = SPI_MasterTransmit(0xFF);
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmith>
		
		if(receivedData == 'B'){
  c8:	82 34       	cpi	r24, 0x42	; 66
  ca:	31 f4       	brne	.+12     	; 0xd8 <main+0x32>
			PORTC |= (1 << LED1);
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << LED2);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	9f e3       	ldi	r25, 0x3F	; 63
  da:	2d e0       	ldi	r18, 0x0D	; 13
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	91 50       	subi	r25, 0x01	; 1
  e0:	20 40       	sbci	r18, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x38>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x42>
  e8:	00 00       	nop
		}

		_delay_ms(1000); // Attendre 1 seconde
//////////////////////////////////////////////////////////////////		
		SPI_MasterTransmit('C');
  ea:	83 e4       	ldi	r24, 0x43	; 67
  ec:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmith>
  f0:	83 ec       	ldi	r24, 0xC3	; 195
  f2:	99 e0       	ldi	r25, 0x09	; 9
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x4e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x54>
  fa:	00 00       	nop
		_delay_ms(10);
		receivedData = SPI_MasterTransmit(0xFF);
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmith>
				
		if(receivedData == 'D'){
 102:	84 34       	cpi	r24, 0x44	; 68
 104:	31 f4       	brne	.+12     	; 0x112 <main+0x6c>
			PORTC &= ~(1 << LED1);
 106:	88 b1       	in	r24, 0x08	; 8
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << LED2);
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	88 b9       	out	0x08, r24	; 8
 112:	9f e3       	ldi	r25, 0x3F	; 63
 114:	2d e0       	ldi	r18, 0x0D	; 13
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	91 50       	subi	r25, 0x01	; 1
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x72>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x7c>
 122:	00 00       	nop
 124:	c5 cf       	rjmp	.-118    	; 0xb0 <main+0xa>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
