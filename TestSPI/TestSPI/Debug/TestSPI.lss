
TestSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f8  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
#define LED2 PINC1
#define LED3 PINC2

void SPI_MasterInit() {
	// Set MOSI, SCK, and SS as outputs
	DDRB |= (1 << MOSI) | (1 << SCK) | (1 << SS);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master, clock rate fck/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z18SPI_MasterTransmith>:
}

// Fonction pour transférer des données via SPI
uint8_t SPI_MasterTransmit(uint8_t data) {
	PORTB &= ~(1<<SS);
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	9b 7f       	andi	r25, 0xFB	; 251
  92:	95 b9       	out	0x05, r25	; 5
	// Start transmission
	SPDR = data;
  94:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while (!(SPSR & (1 << SPIF)));
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_Z18SPI_MasterTransmith+0x8>
	PORTB |= (1<<SS);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	85 b9       	out	0x05, r24	; 5
	// Return received data
	return SPDR;
  a2:	8e b5       	in	r24, 0x2e	; 46
}
  a4:	08 95       	ret

000000a6 <main>:

int main() {
	// Initialize SPI as master
	SPI_MasterInit();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>

	// Configuration des broches de contrôle des LED comme sorties
	DDRC |= (1 << LED1) | (1 << LED2) | (1 << LED3);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	87 b9       	out	0x07, r24	; 7

	uint8_t receivedData;

	while (1) {
		// Envoyer la commande pour allumer la LED 1
		receivedData = SPI_MasterTransmit(0xFF);
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmith>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	e3 ec       	ldi	r30, 0xC3	; 195
  b8:	f9 e0       	ldi	r31, 0x09	; 9
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1a>
  c0:	00 00       	nop
		_delay_ms(10);
		
		uint8_t porte    = 0b00000001 & receivedData;
		uint8_t fenetre1 = 0b00001000 & receivedData;
  c2:	28 2f       	mov	r18, r24
  c4:	28 70       	andi	r18, 0x08	; 8
		uint8_t fenetre2 = 0b01000000 & receivedData;
  c6:	98 2f       	mov	r25, r24
  c8:	90 74       	andi	r25, 0x40	; 64

		//LED1
		if(porte == 0b00000001){
  ca:	80 ff       	sbrs	r24, 0
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <main+0x30>
			PORTC |= (1 << LED1);
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x36>
		}
		else{PORTC &= ~(1 << LED1);}
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	88 b9       	out	0x08, r24	; 8
		//LED2
		if(fenetre1 == 0b00001000){
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	21 f4       	brne	.+8      	; 0xe8 <main+0x42>
			PORTC |= (1 << LED2);
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x48>
		}
		else{PORTC &= ~(1 << LED2);}
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	88 b9       	out	0x08, r24	; 8
		//LED3
		if(fenetre2 == 0b01000000){
  ee:	90 34       	cpi	r25, 0x40	; 64
  f0:	21 f4       	brne	.+8      	; 0xfa <main+0x54>
			PORTC |= (1 << LED3);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	88 b9       	out	0x08, r24	; 8
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x5a>
		}
		else{PORTC &= ~(1 << LED3);}
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	88 b9       	out	0x08, r24	; 8
 100:	87 ea       	ldi	r24, 0xA7	; 167
 102:	91 e6       	ldi	r25, 0x61	; 97
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x5e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x64>
 10a:	00 00       	nop
 10c:	d1 cf       	rjmp	.-94     	; 0xb0 <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
